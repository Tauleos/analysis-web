{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","instance","axios","create","baseURL","App","state","filename","targetUrl","undefined","error_message","upload_props","name","action","concat","onChange","_ref","file","status","response","success","_this","setState","message","error","upload","post","then","res","data","modal","info","title","content","react_default","a","createElement","es_button","type","icon","onClick","downloadUrl","catch","e","iframe","document","style","display","src","body","appendChild","setTimeout","removeChild","className","logo","alt","Object","assign","this","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6WCMlCC,SAAWC,EAAMC,OAAO,CAC5BC,QAA4E,KA6E/DC,6MAzEbC,MAAQ,CACNC,SAAU,GACVC,eAAWC,KAEbC,cAAgB,yFAChBC,aAAe,CACbC,KAAM,OACNC,OAAM,GAAAC,OAAwE,GAAxE,WACNC,SAAU,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACU,SAAhBA,EAAKC,OACHD,EAAKE,SAASC,SAChBC,EAAKC,SAAS,CACZf,SAAUU,EAAKE,SAASZ,WAE1BgB,EAAA,EAAQH,QAAQ,iEAEhBG,EAAA,EAAQC,MAAMH,EAAKX,eAEI,UAAhBO,EAAKC,QACdK,EAAA,EAAQC,MAAMH,EAAKX,mBAMzBe,OAAS,WACPxB,EAASyB,KAAK,OAAQ,CAACnB,SAAUc,EAAKf,MAAMC,WAAWoB,KAAK,SAACC,GAC3DP,EAAKC,SAAS,CACZd,UAAWoB,EAAIC,OAEjBC,EAAA,EAAMC,KAAK,CACTC,MAAO,uFACPC,QACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAAC,EAAA,GAAQC,KAAK,UAAUC,KAAK,iBAAiBC,QAASnB,EAAKoB,mBAIhEC,MAAM,SAAAC,GACPpB,EAAA,EAAQC,MAAMH,EAAKX,oBAGvB+B,YAAc,WACZ,IAAIG,EAASC,SAAST,cAAc,UACpCQ,EAAOE,MAAMC,QAAU,OACvBH,EAAOI,IAAP,GAAAlC,OAAmF,IAAnFA,OAAwFO,EAAKf,MAAME,WACnGqC,SAASI,KAAKC,YAAYN,GAC1BO,WAAW,WACTN,SAASI,KAAKG,YAAYR,IAC1B,8EAMF,OACEV,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,cAChBnB,EAAAC,EAAAC,cAAA,OAAKY,IAAKM,IAAMD,UAAU,WAAWE,IAAI,UAE3CrB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,WACbnB,EAAAC,EAAAC,cAAAX,EAAA,EAAA+B,OAAAC,OAAA,GAAYC,KAAK/C,aAAjB,CAA+B0C,UAAU,WACvCnB,EAAAC,EAAAC,cAAAC,EAAA,OACEH,EAAAC,EAAAC,cAAAG,EAAA,GAAMD,KAAK,WADb,wCAIFJ,EAAAC,EAAAC,cAAAC,EAAA,GAAQC,KAAK,UAAUqB,UAAWD,KAAKpD,MAAMC,SAAUiC,QAASkB,KAAKjC,QAArE,qCAnEQmC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASvB,SAASwB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.70c164c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport {Upload, Button, message, Icon, Modal} from \"antd\";\n\nconst instance = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'http://127.0.0.1:5000' : ''\n});\n\nclass App extends Component {\n  state = {\n    filename: '',\n    targetUrl: undefined\n  };\n  error_message = '上传失败，请联系可怜的老公！';\n  upload_props = {\n    name: 'file',\n    action: `${process.env.NODE_ENV === 'development' ? 'http://127.0.0.1:5000' : ''}/upload`,\n    onChange: ({file}) => {\n      if (file.status === 'done') {\n        if (file.response.success) {\n          this.setState({\n            filename: file.response.filename\n          });\n          message.success('上传成功，请点击处理');\n        } else {\n          message.error(this.error_message);\n        }\n      } else if (file.status === 'error') {\n        message.error(this.error_message);\n      }\n\n    },\n  };\n\n  upload = () => {\n    instance.post('/exe', {filename: this.state.filename}).then((res) => {\n      this.setState({\n        targetUrl: res.data\n      });\n      Modal.info({\n        title: '处理完成，请点击下方按钮下载',\n        content: (\n          <div>\n            <Button type=\"primary\" icon=\"cloud-download\" onClick={this.downloadUrl}></Button>\n          </div>\n        )\n      });\n    }).catch(e => {\n      message.error(this.error_message);\n    });\n  };\n  downloadUrl = () => {\n    let iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    iframe.src = `${process.env.NODE_ENV === 'development' ? 'http://127.0.0.1:5000' : ''}${this.state.targetUrl}`;\n    document.body.appendChild(iframe);\n    setTimeout(() => {\n      document.body.removeChild(iframe);\n    },100);\n\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        </header>\n        <div className=\"content\">\n          <Upload {...this.upload_props} className=\"upload\">\n            <Button>\n              <Icon type='upload'/>请点击上传Excel\n            </Button>\n          </Upload>\n          <Button type=\"primary\" disabled={!this.state.filename} onClick={this.upload}>点击处理</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}